{"version":3,"sources":["components/Editor.js","components/Preview.js","components/Toolbar.js","App.js","serviceWorker.js","constants.js","redux/reducers.js","index.js"],"names":["Editor","props","handleChange","bind","e","this","handleInputChange","target","value","id","onChange","input","React","Component","renderer","marked","Renderer","link","href","title","text","setOptions","gfm","breaks","Preview","dangerouslySetInnerHTML","__html","className","Toolbar","style","name","icon","onClick","App","classes","editorMaximized","previewMaximized","handleMaximizedEditor","handleMaximizedPreview","Boolean","window","location","hostname","match","MAXIMIZE_EDITOR","MAXIMIZE_PREVIEW","HANDLE_INPUT_CHANGE","INITIAL_STATE","reducers","combineReducers","rootReducer","state","constants","action","newState","Object","assign","type","store","createStore","applyMiddleware","thunk","Container","connect","dispatch","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83938388.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Editor extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(e) {\r\n        this.props.handleInputChange(e.target.value);\r\n    }\r\n    render() {\r\n        return (\r\n            <textarea id={'editor'} onChange={this.handleChange} value={this.props.input}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Editor;","import React from 'react';\r\nimport marked from 'marked';\r\n\r\nconst renderer = new marked.Renderer();\r\n\r\nrenderer.link = (href, title, text) => {\r\n  return `\r\n    <a href=\"${href}\" title=\"${title}\" target=\"_blank\">${text}</a>\r\n  `;\r\n};\r\n\r\nmarked.setOptions({\r\n    renderer: renderer,\r\n    gfm: true,\r\n    breaks: true\r\n});\r\n\r\nclass Preview extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <div id={'preview'} dangerouslySetInnerHTML={{__html: marked(this.props.input)}} className={'p-3'}/>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Preview;","import React from 'react';\r\n\r\nclass Toolbar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={'row toolbar pl-2 pr-2 pt-1 pb-1'} style={{'align-items': 'center', 'justify-content': 'space-between', 'margin': 0}}>\r\n                <div>{this.props.name}</div>\r\n                <i className={this.props.icon} onClick={this.props.onClick} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Toolbar;","import React from 'react';\r\nimport './App.css';\r\nimport Editor from './components/Editor';\r\nimport Preview from './components/Preview';\r\nimport Toolbar from './components/Toolbar';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        const usualColumn = ' col-md-6 col-sm-12';\r\n        const classes = this.props.editorMaximized ?\r\n            ['editorWrap col-12 maximized',\r\n                'previewWrap d-none',\r\n                'fa fa-compress'] :\r\n            this.props.previewMaximized ?\r\n                ['editorWrap d-none',\r\n                    'previewWrap col-12 maximized',\r\n                    'fa fa-compress'] :\r\n                ['editorWrap' + usualColumn,\r\n                    'previewWrap' + usualColumn,\r\n                    'fa fa-arrows-alt'];\r\n        return (\r\n            <div className=\"App\">\r\n                <div className={'container'}>\r\n                    <div className={'row'}>\r\n                        <div className={classes[0]} style={{'padding': 0}}>\r\n                            <div className={!this.props.editorMaximized && !this.props.previewMaximized ? 'mr-md-1 mb-2 mb-md-0' : ''}>\r\n                                <Toolbar name={'Editor'} icon={classes[2]} onClick={this.props.handleMaximizedEditor}/>\r\n                                <Editor input={this.props.input} handleInputChange={this.props.handleInputChange}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className={classes[1]} style={{'padding': 0}}>\r\n                            <div className={!this.props.editorMaximized && !this.props.previewMaximized ? 'ml-md-1 mt-2 mt-md-0' : ''}>\r\n                                <Toolbar name={'Preview'} icon={classes[2]} onClick={this.props.handleMaximizedPreview}/>\r\n                                <Preview input={this.props.input}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const MAXIMIZE_EDITOR = 'MAXIMIZE_EDITOR';\r\nexport const MAXIMIZE_PREVIEW = 'MAXIMIZE_PREVIEW';\r\nexport const HANDLE_INPUT_CHANGE = 'HANDLE_INPUT_CHANGE';\r\n\r\nconst PLACEHOLDER =\r\n`# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n  \r\nHere's some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n  \r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`;\r\n\r\nexport const INITIAL_STATE = {\r\n    'input': PLACEHOLDER,\r\n    'editorMaximized': false,\r\n    'previewMaximized': false\r\n};","import {combineReducers} from 'redux';\r\nimport * as constants from '../constants';\r\n\r\nfunction rootReducer(state = constants.INITIAL_STATE, action = {'type': 'default'}) {\r\n    let newState = Object.assign({}, state);\r\n    switch(action.type) {\r\n        case constants.HANDLE_INPUT_CHANGE:\r\n            newState.input = action.input;\r\n            return newState;\r\n        case constants.MAXIMIZE_EDITOR:\r\n            newState.editorMaximized = !state.editorMaximized;\r\n            return newState;\r\n        case constants.MAXIMIZE_PREVIEW:\r\n            newState.previewMaximized = !state.previewMaximized;\r\n            return newState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst reducers = combineReducers({rootReducer});\r\n\r\nexport default reducers;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport {applyMiddleware, createStore} from 'redux';\r\nimport { Provider, connect } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './redux/reducers';\r\nimport * as constants from './constants';\r\n\r\nconst store = createStore(\r\n    reducers,\r\n    applyMiddleware(thunk)\r\n);\r\n\r\nconst handleInputChange = (input) => {\r\n    return {\r\n        type: constants.HANDLE_INPUT_CHANGE,\r\n        input: input\r\n    };\r\n};\r\n\r\nconst handleMaximizedEditor = () => {\r\n    return {\r\n        type: constants.MAXIMIZE_EDITOR\r\n    };\r\n};\r\n\r\nconst handleMaximizedPreview = () => {\r\n    return {\r\n        type: constants.MAXIMIZE_PREVIEW\r\n    };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        input: state.rootReducer.input,\r\n        editorMaximized: state.rootReducer.editorMaximized,\r\n        previewMaximized: state.rootReducer.previewMaximized\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        handleInputChange: (input) => {\r\n            dispatch(handleInputChange(input));\r\n        },\r\n        handleMaximizedEditor: () => {\r\n            dispatch(handleMaximizedEditor());\r\n        },\r\n        handleMaximizedPreview: () => {\r\n            dispatch(handleMaximizedPreview());\r\n        }\r\n    };\r\n};\r\n\r\nconst Container = connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <Container/>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}